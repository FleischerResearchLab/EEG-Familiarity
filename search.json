[
  {
    "objectID": "tutorials/projection_example.html",
    "href": "tutorials/projection_example.html",
    "title": "Projection Example",
    "section": "",
    "text": "# imports\nfrom EEG_Familiarity import preproc\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nimport matplotlib.pyplot as plt\n\n\n# multiple group\n\nfile_path = \"../data/data_CRMN_vs_MMN_imbalLDA_order_proj_1.mat\"\n\ndata_preproc = preproc(file_path, experiment_num=1)\npos1, neg1 = data_preproc.filter_index(2,5,2,4)\npos2, neg2 = data_preproc.filter_index(4,5,4,4)\n\npos_idx, neg_idx = data_preproc.merge_two_class(pos1, neg1, pos2, neg2)\nX, y, subject = data_preproc.get_data_by_index(pos_idx, neg_idx)\n\nLDA = LinearDiscriminantAnalysis(shrinkage=None, solver=\"eigen\")\n\npos_idx = [10, 11]\nneg_idx = [8, 9]\n\ndata_preproc.generate_projections(LDA, pos_idx, neg_idx, X, y, subject, balance=True)\n\nAttributeError: module 'matplotlib.pyplot' has no attribute 'set_xticks'\n\n\n\n\n\n\n# multiple group\n\nfile_path = \"../../../EEG-Familiarity-Prediction/data_imbalLDA_1.mat\"\n\ndata_preproc = preproc(file_path, experiment_num=1)\npos1, neg1 = data_preproc.filter_index(2,5,2,4)\npos2, neg2 = data_preproc.filter_index(4,5,4,4)\n\npos_idx, neg_idx = data_preproc.merge_two_class(pos1, neg1, pos2, neg2)\nX, y, subject = data_preproc.get_data_by_index(pos_idx, neg_idx)\n\nLDA = LinearDiscriminantAnalysis(shrinkage=None, solver=\"eigen\")\n\npos_idx = [10, 11]\nneg_idx = [8, 9]\n\nfig, axs = plt.subplots(5,2, figsize=(15, 25))\naxs = axs.flatten()\n\nfor _ in range(10):\n    data_preproc.generate_projections(LDA, pos_idx, neg_idx, X, y, subject, balance=True, plt=axs[_])"
  },
  {
    "objectID": "tutorials/data_format.html",
    "href": "tutorials/data_format.html",
    "title": "Data Format",
    "section": "",
    "text": "The example data is shown in the directory. Let’s load the data and see the formats\nimport numpy as np\nimport scipy\nfile_path = \"../data/data_CRMN_vs_MMN_imbalLDA_order_proj_1.mat\"\ndata = scipy.io.loadmat(file_path)\ndata.keys()\n\ndict_keys(['__header__', '__version__', '__globals__', 'user_class_min_1', 'user_feat_1', 'user_prob_1', 'user_resp_1', 'user_source_1', 'user_tr_order_1', 'user_train_prob_1', 'user_weights_1'])\nThe source code that generated this data file can be accessed at this link"
  },
  {
    "objectID": "tutorials/data_format.html#variables-of-interest",
    "href": "tutorials/data_format.html#variables-of-interest",
    "title": "Data Format",
    "section": "Variables of Interest",
    "text": "Variables of Interest\n\ntr_num\n\nTrail Number\n\nuser_feat_{tr_num}\n\nFeature engineered data for each user.\n\nuser_source{tr_num}\n\nSource Information\n\nuser_resp_{tr_num}\n\nResponse Information"
  },
  {
    "objectID": "tutorials/data_format.html#user-features",
    "href": "tutorials/data_format.html#user-features",
    "title": "Data Format",
    "section": "User Features",
    "text": "User Features\n\nuser_features = data[\"user_feat_1\"][0]\nuser_features.shape\n\n(26,)\n\n\nThe 26 in shape indicates that in this trail, it has 26 participants.\n\nuser_features[0].shape, user_features[1].shape\n\n((432, 72), (134, 72))\n\n\n\nuser_features[0]\n\narray([[ -7.23661128, -13.93739628, -22.81788437, ...,  -9.40298223,\n        -11.77818306, -18.10076694],\n       [ -2.63865315,   0.3358343 ,  -1.92867504, ...,  14.19302948,\n          9.98168734,  17.5732571 ],\n       [ -4.28406267,  -9.36639654, -16.71320915, ...,  -2.0318536 ,\n         -3.8530683 ,   3.86939731],\n       ...,\n       [ -3.88435706,  -4.79033675,  -5.75699235, ...,  14.81179504,\n         17.04872137,  13.36880608],\n       [-13.37804033,  -7.12282845,  -1.5593848 , ...,  11.92473593,\n         15.36710888,  26.49037254],\n       [  0.18273821,  -0.71073707,  -6.72626149, ...,  -3.00038489,\n         -4.9075405 , -15.84218536]])\n\n\nEach participant will have different number of trails, but all the trails has the same number of features (second dimension of 72). Details information is documented at the ALL_DATA_1.mat file. (TODO)\nEach observation in the data has an associated source and response label."
  },
  {
    "objectID": "tutorials/data_format.html#source-information",
    "href": "tutorials/data_format.html#source-information",
    "title": "Data Format",
    "section": "Source Information",
    "text": "Source Information\nSource information is a one-dimensional array that contains the numbering label for the source information. The details of the encoding are illustrated in this table:\n\n\n\nEncoding Number\nFull Description\nAbbreviation\n\n\n\n\n1\nSource Correct\nSC\n\n\n2\nCorrect Rejection\nCR\n\n\n3\nSource Incorrect\nSI\n\n\n4\nMiss\nMiss\n\n\n5\nFalse Alarm\nFA"
  },
  {
    "objectID": "tutorials/data_format.html#response-information",
    "href": "tutorials/data_format.html#response-information",
    "title": "Data Format",
    "section": "Response Information",
    "text": "Response Information\nResponse information is a one-dimensional array that contains the numbering label for the response information.\n\n\n\nEncoding Number\nFull Description\nAbbreviation\n\n\n\n\n1\nRemember Source\nRS\n\n\n2\nRemember Other\nRO\n\n\n3\nFamiliarity\nF\n\n\n4\nMaybe New\nMN\n\n\n5\nSure New\nSN"
  },
  {
    "objectID": "api/feature_extractor.html",
    "href": "api/feature_extractor.html",
    "title": "Data Loader (In Construction…)",
    "section": "",
    "text": "source\n\nDataLoader\n\n DataLoader (all_data_fp='')\n\nLoad and Preprocess the EEG Raw Data\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nall_data_fp\nstr\n\nthe all data file’s path\n\n\n\n\nsource\n\n\nerp_feature\n\n erp_feature (input_mat, win_size)\n\n\nfp = \"../../../EEG-Local/Memory2018/Exp1_SOSI/ALLDATA_1.mat\"\nloader = DataLoader(fp)\n\n\noutput_data = loader.preprocess_by_trial(0)\n\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n(432, 1)\n\n\n\noutput_data.shape\n\n(128, 432, 1)\n\n\n\nloader.source_info"
  },
  {
    "objectID": "experiments/lda_projections.html",
    "href": "experiments/lda_projections.html",
    "title": "LDA Projections onto the Discriminant Learned by the Complete Dataset",
    "section": "",
    "text": "# Build from source\n!pip install -e '../../[dev]'\n\nObtaining file:///Users/scottyang/Desktop/SP23_Working/EEG/EEG-Familiarity\nRequirement already satisfied: fastcore in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (1.5.29)\nRequirement already satisfied: matplotlib in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (3.5.1)\nRequirement already satisfied: numpy in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (1.22.3)\nRequirement already satisfied: pandas in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (1.4.2)\nRequirement already satisfied: scipy in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (1.11.1)\nRequirement already satisfied: scikit-learn in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (1.3.0)\nRequirement already satisfied: seaborn in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (0.12.2)\nRequirement already satisfied: h5py in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from EEG-Familiarity==0.0.1) (3.9.0)\nRequirement already satisfied: pip in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from fastcore-&gt;EEG-Familiarity==0.0.1) (21.2.4)\nRequirement already satisfied: packaging in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from fastcore-&gt;EEG-Familiarity==0.0.1) (21.3)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from matplotlib-&gt;EEG-Familiarity==0.0.1) (1.4.2)\nRequirement already satisfied: pyparsing&gt;=2.2.1 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from matplotlib-&gt;EEG-Familiarity==0.0.1) (3.0.4)\nRequirement already satisfied: pillow&gt;=6.2.0 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from matplotlib-&gt;EEG-Familiarity==0.0.1) (9.0.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from matplotlib-&gt;EEG-Familiarity==0.0.1) (4.25.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from matplotlib-&gt;EEG-Familiarity==0.0.1) (0.11.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from matplotlib-&gt;EEG-Familiarity==0.0.1) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;EEG-Familiarity==0.0.1) (1.16.0)\nRequirement already satisfied: pytz&gt;=2020.1 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from pandas-&gt;EEG-Familiarity==0.0.1) (2022.1)\nRequirement already satisfied: joblib&gt;=1.1.1 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from scikit-learn-&gt;EEG-Familiarity==0.0.1) (1.3.1)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in /Users/scottyang/anaconda3/envs/eeg/lib/python3.10/site-packages (from scikit-learn-&gt;EEG-Familiarity==0.0.1) (3.1.0)\nInstalling collected packages: EEG-Familiarity\n  Attempting uninstall: EEG-Familiarity\n    Found existing installation: EEG-Familiarity 0.0.1\n    Uninstalling EEG-Familiarity-0.0.1:\n      Successfully uninstalled EEG-Familiarity-0.0.1\n  Running setup.py develop for EEG-Familiarity\nSuccessfully installed EEG-Familiarity-0.0.1\n\n\n\nimport scipy.io\nimport pandas as pd\nimport numpy as np \nfrom sklearn.model_selection import LeaveOneGroupOut, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.covariance import ledoit_wolf\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nimport scipy.stats as stats\n\nimport matplotlib.pyplot as plt\n\n\n\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfrom EEG_Familiarity.preproc import preproc\n\n# class attributes\nsource_info = [\"SC\", \"CR\", \"SI\", \"M\", \"FA\"]\nresponse_info = [\"RS\", \"RO\", \"F\", \"MN\", \"SN\"]\n\n# the x-axis on the projection graph\nx_axis = [(1, 1), (3, 1), (5, 1), (1, 2), (5, 2),\n          (1, 3), (3, 3), (5, 3), (4, 4), (2, 4),\n          (4, 5), (2, 5)]\n\n\ndef cal_acc_balanced(clf, trail_num):\n    \"\"\"\n    A summary function that calculate the accuracy in the literature\n    based the aforementioned approach. \n    \n    clf and trail_num can be used to specify which classifier and which\n    experiment that we wish to learn.\n    \"\"\"\n    file_path = f\"data_imbalLDA_{trail_num}.mat\"\n    data_preproc = preproc(file_path, trail_num)\n    if clf == \"SN_MN\":\n        pos1, neg1 = data_preproc.filter_index(2,5,2,4)\n        pos2, neg2 = data_preproc.filter_index(4,5,4,4)\n    elif clf == \"F_CR\":\n        pos1, neg1 = data_preproc.filter_index(1,3,2,4)\n        pos2, neg2 = data_preproc.filter_index(3,3,2,5)\n    else:\n        raise ValueError(\"Unknown Classifier. Should be either `SN_MN` or `F_CR`\")\n    pos_idx, neg_idx = data_preproc.merge_two_class(pos1, neg1, pos2, neg2)\n    X, y, subject = data_preproc.get_data_by_index(pos_idx, neg_idx)\n\n    logo = LeaveOneGroupOut()\n\n    scores = []\n\n    for train_idx, test_idx in logo.split(X, y, subject):\n        X_train, y_train = X[train_idx,:], y[train_idx]\n        X_test, y_test = X[test_idx,:], y[test_idx]\n        LDA = LinearDiscriminantAnalysis(shrinkage = None, solver = 'eigen')\n        LDA.fit(X_train, y_train)\n        # randomly drop datapoint to balance class\n        pos_idx, neg_idx = np.arange(len(test_idx))[y_test == 1], np.arange(len(test_idx))[y_test != 1]\n        pos_len, neg_len = len(pos_idx), len(neg_idx)\n        acc = []\n        for _ in range(10):\n            if pos_len &gt; neg_len:\n                # when there are more positive class than negative\n                # randomly drop positive class to equivalent the negative class\n                pos_chosen = np.random.choice(pos_idx, neg_len, replace=False)\n                neg_chosen = neg_idx\n            else:\n                pos_chosen = pos_idx\n                neg_chosen = np.random.choice(neg_idx, pos_len, replace=False)\n            filter_test_idx = np.concatenate([pos_chosen, neg_chosen])\n            X_test_balanced, y_test_balanced = X_test[filter_test_idx, :], y_test[filter_test_idx]\n            assert sum(y_test_balanced) == 0 # to check whether they are balanced class\n            acc.append(LDA.score(X_test_balanced, y_test_balanced))\n        acc = np.array(acc)\n        scores.append(acc)\n    scores = np.array(scores)\n    return scores.mean()\n\n\n# multiple group\nfile_path = \"../../../EEG-Familiarity-Prediction/data_imbalLDA_1.mat\"\n\ndata_preproc = preproc(file_path, experiment_num=1)\npos1, neg1 = data_preproc.filter_index(2,5,2,4)\npos2, neg2 = data_preproc.filter_index(4,5,4,4)\n\npos_idx, neg_idx = data_preproc.merge_two_class(pos1, neg1, pos2, neg2)\nX, y, subject = data_preproc.get_data_by_index(pos_idx, neg_idx)\n\nLDA = LinearDiscriminantAnalysis(shrinkage=None, solver=\"eigen\")\n\npos_idx = [10, 11]\nneg_idx = [8, 9]\ndata_preproc.generate_projections(LDA, pos_idx, neg_idx, X, y, subject)\nplt.title(f\"{clf} Projection Experiment {exp}\", fontsize = 12)\n\nValueError: Found input variables with inconsistent numbers of samples: [2, 3813, 3813]\n\n\n\nX.shape\n\n(3813, 72)\n\n\n\ny.shape\n\n(3813,)\n\n\n\nsubject.shape\n\n(3813,)"
  },
  {
    "objectID": "TODOs/todo_list.html",
    "href": "TODOs/todo_list.html",
    "title": "Todo List",
    "section": "",
    "text": "Understand EEG Data Preprocessing from RAW Signal to Features\nReplicate the Preprocessing System in Python\nApply the ML Pipeline to the New Dataset."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EEG-Familiarity",
    "section": "",
    "text": "pip install git+https://github.com/FleischerResearchLab/EEG-Familiarity.git"
  },
  {
    "objectID": "index.html#install-directly-from-github-repository",
    "href": "index.html#install-directly-from-github-repository",
    "title": "EEG-Familiarity",
    "section": "",
    "text": "pip install git+https://github.com/FleischerResearchLab/EEG-Familiarity.git"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "EEG-Familiarity",
    "section": "How to use",
    "text": "How to use\nPlease refer to the tutorial section.\n\nfrom EEG_Familiarity import preproc"
  },
  {
    "objectID": "api/dev_eeglab.html",
    "href": "api/dev_eeglab.html",
    "title": "EEG Lab Integration (In Construction…)",
    "section": "",
    "text": "from oct2py import octave\n\n\nfrom oct2py import octave\n\n# Example\noctave.addpath('../../../eeglab2022.0/functions/guifunc')\noctave.addpath('../../../eeglab2022.0/functions/popfunc')\noctave.addpath('../../../eeglab2022.0/functions/adminfunc')\noctave.addpath('../../../eeglab2022.0/functions/sigprocfunc')\noctave.addpath('../../../eeglab2022.0/functions/miscfunc')\nEEG = octave.pop_loadset('../../../eeglab2022.0/sample_data/eeglab_data_epochs_ica.set')\n\n\n# plot first trial of channel 1\nimport matplotlib.pyplot as plt\n\n\nplt.plot(EEG.data[:20][0])\nplt.show()\n\n\n\n\n\nEEG.data\n\narray([[[ 2.99720556e-01, -2.27002201e+01, -3.03786087e+01, ...,\n          6.50506306e+00,  1.96530838e+01,  4.48800507e+01],\n        [ 1.47708530e+01, -2.66990261e+01, -1.77102699e+01, ...,\n          2.15030937e+01,  2.00707855e+01,  3.81899643e+01],\n        [ 9.81541634e+00, -3.10870762e+01, -2.23124809e+01, ...,\n          9.06659698e+00,  1.45347757e+01,  2.79867783e+01],\n        ...,\n        [-6.59704208e+00,  4.76515055e+00, -6.70896378e+01, ...,\n         -2.80656266e+00,  5.02813416e+01,  3.23513818e+00],\n        [-2.08746262e+01,  1.75399780e+01, -7.11264420e+01, ...,\n         -1.55266600e+01,  5.30656929e+01,  1.39949541e+01],\n        [-2.06450272e+01,  1.59338455e+01, -5.83325615e+01, ...,\n         -1.78559952e+01,  6.89979172e+01,  1.60289345e+01]],\n\n       [[ 8.97458076e+00, -8.47458839e+00,  3.57027168e+01, ...,\n          4.99529457e+00,  8.78635216e+00,  2.41225777e+01],\n        [ 2.49004383e+01, -1.18544350e+01,  5.09160957e+01, ...,\n          2.58609009e+01,  1.05307426e+01,  2.10766602e+01],\n        [ 5.11914492e+00, -1.20421314e+01,  3.86015739e+01, ...,\n          7.99160957e+00,  3.36271477e+00,  1.77152386e+01],\n        ...,\n        [-5.92987862e+01, -6.58087540e+01, -6.09985390e+01, ...,\n         -2.59302731e+01,  3.73778229e+01,  1.00686531e+01],\n        [-7.17435455e+01, -4.73045616e+01, -6.89564819e+01, ...,\n         -3.18692360e+01,  3.32411537e+01,  2.06878071e+01],\n        [-7.92148285e+01, -5.33047218e+01, -5.54454384e+01, ...,\n         -2.86430855e+01,  4.91855736e+01,  1.51083307e+01]],\n\n       [[ 1.47928464e+00, -2.51304188e+01, -1.07053490e+01, ...,\n          2.50700951e+01,  3.39128799e+01,  4.21649628e+01],\n        [ 2.30814362e+01, -2.15298061e+01, -5.59260607e+00, ...,\n          3.50741081e+01,  4.57127380e+01,  3.43763466e+01],\n        [ 1.17982674e+01, -2.69982052e+01, -1.54629631e+01, ...,\n          2.74137802e+01,  4.05118332e+01,  3.13652325e+01],\n        ...,\n        [ 8.40039062e+00,  1.75759354e+01, -2.94956188e+01, ...,\n         -2.52356243e+00,  5.08532257e+01,  2.91940269e+01],\n        [ 4.26577616e+00,  2.79611664e+01, -3.76841774e+01, ...,\n         -2.00191517e+01,  4.78729935e+01,  3.85718994e+01],\n        [ 1.17477779e+01,  2.83751965e+01, -2.51706009e+01, ...,\n         -1.91058331e+01,  6.51554413e+01,  3.66048737e+01]],\n\n       ...,\n\n       [[-5.22963858e+00, -8.16925716e+00, -1.19736938e+01, ...,\n          1.97712460e+01,  1.07007575e+00, -3.17954388e+01],\n        [ 7.54676437e+00, -6.79479980e+00, -8.16635895e+00, ...,\n          1.97822628e+01,  1.23730316e+01, -2.10283585e+01],\n        [ 3.47245669e+00, -3.83050489e+00, -9.00899887e+00, ...,\n          1.79013996e+01,  9.18996429e+00, -6.72756433e+00],\n        ...,\n        [ 4.94876862e+01,  8.97159576e+00,  1.91829948e+01, ...,\n         -9.43519211e+00, -1.47199965e+01, -2.22776794e+01],\n        [ 4.71152687e+01,  1.62360916e+01,  7.41574430e+00, ...,\n         -6.16654348e+00, -1.87101460e+01, -1.69580116e+01],\n        [ 4.03415031e+01,  9.79112625e+00,  5.92826033e+00, ...,\n          1.24484658e+00, -7.35373116e+00, -2.03862991e+01]],\n\n       [[-6.58284855e+00, -4.16265392e+00, -2.10573959e+01, ...,\n          2.35093632e+01, -1.40330064e+00, -3.01745434e+01],\n        [ 7.99559832e+00, -3.38554144e+00, -1.32248116e+01, ...,\n          2.13034248e+01,  6.80579615e+00, -1.94827671e+01],\n        [ 1.61410403e+00, -3.04438758e+00, -1.17417736e+01, ...,\n          1.78866119e+01,  2.91150737e+00, -4.92253828e+00],\n        ...,\n        [ 4.76172714e+01,  4.98307037e+00,  2.50972443e+01, ...,\n         -1.77920914e+00, -1.40039711e+01, -1.45771055e+01],\n        [ 3.75121155e+01,  8.81854248e+00,  1.14603767e+01, ...,\n          5.83786392e+00, -2.19732285e+01, -9.84155464e+00],\n        [ 3.17769032e+01,  3.20429850e+00,  1.03258171e+01, ...,\n          1.33718147e+01, -1.61360321e+01, -1.62799034e+01]],\n\n       [[-4.28801584e+00,  3.14514875e+00, -2.73413010e+01, ...,\n          2.81408939e+01, -5.17334557e+00, -2.92511578e+01],\n        [ 1.25567036e+01,  2.51382208e+00, -1.34160776e+01, ...,\n          2.50725117e+01, -4.34875712e-02, -1.98801460e+01],\n        [ 6.75363207e+00,  4.14497709e+00, -1.28773623e+01, ...,\n          2.17524662e+01, -6.48137856e+00, -7.08586693e+00],\n        ...,\n        [ 3.83151665e+01,  1.41314954e-01,  3.00688477e+01, ...,\n          3.18429917e-01, -1.68101501e+01, -1.35089607e+01],\n        [ 2.55426769e+01, -2.78731853e-01,  1.68298035e+01, ...,\n          6.22832966e+00, -2.56508389e+01, -7.37998772e+00],\n        [ 2.04136124e+01, -5.69886875e+00,  1.62403564e+01, ...,\n          1.09556074e+01, -2.20681038e+01, -1.55489235e+01]]],\n      dtype=float32)"
  },
  {
    "objectID": "api/preproc.html",
    "href": "api/preproc.html",
    "title": "ML preproc",
    "section": "",
    "text": "This package preprocess and assumed a very specific data type and structure. The details of the data structures and their associated meanings is documented at tutorials-&gt;data_format.\nThis package is essentially a custom filter that choose the binary classes out of all combinations."
  },
  {
    "objectID": "api/preproc.html#background",
    "href": "api/preproc.html#background",
    "title": "ML preproc",
    "section": "Background",
    "text": "Background\nEach observation has a 72 dimensional EEG features, and has two identifiers accordingly – source/new judgements and subjective ratings. Those categorized each observation into 13 different classes.\n\n\n\nFig 2: Behavioral Categories\n\n\nThis package will filter the classes information based on the desired positive and negative class label."
  },
  {
    "objectID": "api/preproc.html#api",
    "href": "api/preproc.html#api",
    "title": "ML preproc",
    "section": "API",
    "text": "API\n\nsource\n\npreproc\n\n preproc (file_path, experiment_num)\n\nPreprocessing package that preprocess the given the features in multi class settings, get out the desire class.\n\nsource\n\n\npreproc.__init__\n\n preproc.__init__ (file_path, experiment_num)\n\nInitialize the Preprocessing module and load the appropriate dataset\n\n\n\n\nType\nDetails\n\n\n\n\nfile_path\nstr\nfile path to the matlab matrix data\n\n\nexperiment_num\nint\ndenotes the experiement number\n\n\n\n\nsource\n\n\npreproc.filter_index\n\n preproc.filter_index (pos_source_label:int, pos_resp_label:int,\n                       neg_source_label:int, neg_resp_label:int)\n\nA simplified version of prepare label. Instead of returns all the dataset (X, y, group), this only returns a boolean array of the corresponding index Since the data is in a nested array (in other words, 2-d array with different dim), the returned element should also be a nested array.\nThe purpose of this is to prepared for multi-subclass merge for a single class preparation\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npos_source_label\nint\nthe positive class’s source label.for details, please refer to the above encodings\n\n\npos_resp_label\nint\nthe positive class’s response label\n\n\nneg_source_label\nint\nthe negative class’s source label\n\n\nneg_resp_label\nint\n\n\n\nReturns\nnp.ndarray\nthe nested boolean array that indicates the location ofthe positive class.\n\n\n\n\nsource\n\n\npreproc.filter_index_single_class\n\n preproc.filter_index_single_class (source_label:int, resp_label:int,\n                                    include_left_out=True)\n\nVariant of the above’s filter_index. This method get out the indices of a specific class (single class indexer)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsource_label\nint\n\nsource label.for details, please refer to the above encodings\n\n\nresp_label\nint\n\nresponse label\n\n\ninclude_left_out\nbool\nTrue\n\n\n\nReturns\nnp.ndarray\n\nthe nested boolean array that indicates the location ofthe positive class.\n\n\n\n\nsource\n\n\npreproc.merge_two_class\n\n preproc.merge_two_class (pos1, neg1, pos2, neg2)\n\nApply logical OR to two positive class and two negative class Purpose is to merge 1 and 2\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npos1\nnp.ndarray([Object])\nthe positive class 1 index array\n\n\nneg1\nnp.ndarray([Object])\nthe negative class 1 index array\n\n\npos2\nnp.ndarray([Object])\nthe positive class 2 index array\n\n\nneg2\nnp.ndarray([Object])\nthe negative class 2 index array\n\n\nReturns\nnp.ndarray\nthe merged nested boolean array that indicates the location ofthe positive class.\n\n\n\n\nsource\n\n\npreproc.get_data_by_index\n\n preproc.get_data_by_index (pos_idx, neg_idx, eliminate_trails=True)\n\ngiven positive and negative index array, indexing out the given data matrices and flattern them out\nThis will exclude the subject with 10 or fewer trials on each class.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npos_idx\nnp.ndarray\n\nthe nested boolean array that indicates the position of thepositive class\n\n\nneg_idx\nnp.ndarray\n\nthe nested boolean array that indicates the position of thenegative class\n\n\neliminate_trails\nbool\nTrue\nwhether we choose to leave out the participant with ten or lessclass label\n\n\nReturns\nnp.ndarray\n\nthe input for the formatted flattern data\n\n\n\n\nsource\n\n\npreproc.get_data_by_index_single_class\n\n preproc.get_data_by_index_single_class (idx)\n\nVariant of the aboves get_data_by_index, but with single class idx given an index array, indexing out the given data matrices and flattern them out\nThis will exclude the subject with 10 or fewer trials on each class.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nidx\nnp.ndarray\nthe nested boolean array that indicates the position of the desire class\n\n\nReturns\nnp.ndarray\nthe input for the formatted flattern data\n\n\n\n/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Notes\n  else: warn(msg)\n\nsource\n\n\npreproc.get_data_by_participant\n\n preproc.get_data_by_participant (participant)\n\nGiven a participant’s identifier (generated in the constructor), index out the X for that corresponding participant.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nparticipant\nint\nid of the participant\n\n\nReturns\nnp.ndarray\nthe input for the formatted flatten data\n\n\n\n/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Parameters:\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.17/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Outputs:\n  else: warn(msg)\n\nsource\n\n\npreproc.generate_projections\n\n preproc.generate_projections (clf, pos_idx_highlight, neg_idx_highlight,\n                               X, y, subject, balance=False, plt=&lt;module\n                               'matplotlib.pyplot' from '/opt/hostedtoolca\n                               che/Python/3.9.17/x64/lib/python3.9/site-\n                               packages/matplotlib/pyplot.py'&gt;)\n\nA function used to generate the projections based on the classifier and according to different positive and negative classes."
  },
  {
    "objectID": "tutorials/data_filter.html",
    "href": "tutorials/data_filter.html",
    "title": "Data Filter / Trail Selections",
    "section": "",
    "text": "To prepare the data into a machine learning model ready format, we need to do the following preprocessing steps. Along the steps, we need to provide some information regarding the positive and negative class.\n\n# imports\nfrom EEG_Familiarity import preproc\n\nSpecified the file path, and instantiate a preproc object.\n\nfile_path = \"../data/data_CRMN_vs_MMN_imbalLDA_order_proj_1.mat\"\ndata_preproc = preproc(file_path, experiment_num=1)\ndata_preproc\n\n&lt;EEG_Familiarity.preproc.preproc&gt;\n\n\nSpecify the positive class and negative class index via preproc.filter_index. For the numbering system, please refer to Data Format\n\npos1, neg1 = data_preproc.filter_index(2,5,2,4)\npos2, neg2 = data_preproc.filter_index(4,5,4,4)\n\nBased on the filter, we can do an inner merge operation between two class using preproc.merge_two_class. After merging, we can get the data directly using preproc.get_data_by_index.\n\npos_idx, neg_idx = data_preproc.merge_two_class(pos1, neg1, pos2, neg2)\nX, y, subject = data_preproc.get_data_by_index(pos_idx, neg_idx)\n\nBy doing so, we constructed the \\(\\mathbb{X}\\), \\(\\mathbb{y}\\) from the data of this specific classifier, along with a subject identifiers.\n\nX.shape, y.shape, subject.shape\n\n((3813, 72), (3813,), (3813,))\n\n\nFrom the output, this particular classifier has \\(3813\\) observation and \\(72\\) dimensional features associate with them."
  }
]